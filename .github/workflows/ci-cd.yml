permissions:
  security-events: write
name: 🚀 CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - name: 📚 Install dependencies
        run: pnpm install
      - name: 🎨 Lint code
        run: pnpm run lint
      - name: 🔍 Type check
        run: pnpm exec tsc --noEmit
      # - name: 🔒 Security audit
      #   run: npm audit --audit-level high
      - name: 📊 Bundle analysis
        run: SKIP_PAYLOAD_BUILD=1 pnpm run build
        env:
          NODE_ENV: production
          PAYLOAD_SECRET: test-secret-key-for-ci
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXT_PUBLIC_SITE_URL: http://localhost:3000

  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - name: 📚 Install dependencies
        run: pnpm install
      - name: 🧪 Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          PAYLOAD_SECRET: test-secret-key
          NODE_ENV: test

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs:
      - quality
      - test
      - security
    if: always()
    steps:
      - name: 📢 Notify on success
        if: ${{ success() }}
        run: |
          echo "✅ CI/CD pipeline completed successfully!"
          # Add Slack/Discord notification here if needed
      - name: 📢 Notify on failure
        if: ${{ failure() }}
        run: |
          echo "❌ CI/CD pipeline failed!"
          # Add Slack/Discord notification here if needed
